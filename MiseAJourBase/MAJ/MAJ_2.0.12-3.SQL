 
CREATE or ALTER  PROCEDURE CREA_LICENCE_EPICEA
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_LICENCE_EPICEA')) THEN
  begin
    query = 'CREATE TABLE TA_LICENCE_EPICEA (
    ID_SUPPORT_ABON  DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_UTILISATEUR   DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    GROUPE           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    QUI_MODIF        DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF      TIMESTAMP DEFAULT ''NOW'',
    QUI_CREE         DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE       TIMESTAMP DEFAULT ''NOW'',
    "VERSION"        NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES         DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ      INTEGER,
    TELECHARGEMENT   DBOOL /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */
)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_LICENCE_EPICEA ADD CONSTRAINT FK_TA_LICENCE_EPICEA_1 FOREIGN KEY (GROUPE) REFERENCES TA_FAMILLE_TIERS (ID_FAMILLE)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_LICENCE_EPICEA ADD CONSTRAINT FK_TA_LICENCE_EPICEA_2 FOREIGN KEY (ID_UTILISATEUR) REFERENCES TA_UTILISATEUR (ID_UTILISATEUR)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_LICENCE_EPICEA ADD CONSTRAINT FK_TA_LICENCE_EPICEA_3 FOREIGN KEY (ID_SUPPORT_ABON) REFERENCES TA_SUPPORT_ABON (ID_SUPPORT_ABON)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREA_LICENCE_EPICEA 
^
drop procedure CREA_LICENCE_EPICEA
^


CREATE or ALTER  PROCEDURE CREA_LICENCE_BDG
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_LICENCE_BDG')) THEN
  begin
    query = 'CREATE TABLE TA_LICENCE_BDG (
    ID_SUPPORT_ABON  DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_UTILISATEUR   DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    GROUPE           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    QUI_MODIF        DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF      TIMESTAMP DEFAULT ''NOW'',
    QUI_CREE         DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE       TIMESTAMP DEFAULT ''NOW'',
    "VERSION"        NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES         DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ      INTEGER,
    TELECHARGEMENT   DBOOL /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */
)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_LICENCE_BDG ADD CONSTRAINT FK_TA_LICENCE_BDG_1 FOREIGN KEY (ID_SUPPORT_ABON) REFERENCES TA_SUPPORT_ABON (ID_SUPPORT_ABON)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_LICENCE_BDG ADD CONSTRAINT FK_TA_LICENCE_BDG_2 FOREIGN KEY (ID_UTILISATEUR) REFERENCES TA_UTILISATEUR (ID_UTILISATEUR)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_LICENCE_BDG ADD CONSTRAINT FK_TA_LICENCE_BDG_3 FOREIGN KEY (GROUPE) REFERENCES TA_FAMILLE_TIERS (ID_FAMILLE)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREA_LICENCE_BDG 
^
drop procedure CREA_LICENCE_BDG
^

CREATE or ALTER  PROCEDURE CREA_LICENCE_SARA
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_LICENCE_SARA')) THEN
  begin
    query = 'CREATE TABLE TA_LICENCE_SARA (
    ID_SUPPORT_ABON  DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_UTILISATEUR   DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    GROUPE           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    QUI_MODIF        DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF      TIMESTAMP DEFAULT ''NOW'',
    QUI_CREE         DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE       TIMESTAMP DEFAULT ''NOW'',
    "VERSION"        NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES         DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ      INTEGER,
    TELECHARGEMENT   DBOOL /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */
)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_LICENCE_SARA ADD CONSTRAINT FK_TA_LICENCE_SARA_1 FOREIGN KEY (ID_SUPPORT_ABON) REFERENCES TA_SUPPORT_ABON (ID_SUPPORT_ABON)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_LICENCE_SARA ADD CONSTRAINT FK_TA_LICENCE_SARA_2 FOREIGN KEY (ID_UTILISATEUR) REFERENCES TA_UTILISATEUR (ID_UTILISATEUR)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_LICENCE_SARA ADD CONSTRAINT FK_TA_LICENCE_SARA_3 FOREIGN KEY (GROUPE) REFERENCES TA_FAMILLE_TIERS (ID_FAMILLE)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREA_LICENCE_SARA 
^
drop procedure CREA_LICENCE_SARA
^

/***** Triggers******/


CREATE OR ALTER TRIGGER TBID_LICENCE_EPICEA FOR TA_LICENCE_EPICEA
ACTIVE BEFORE INSERT POSITION 1
as
begin
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBU_LICENCE_EPICEA FOR TA_LICENCE_EPICEA
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE OR ALTER TRIGGER TBID_LICENCE_BDG FOR TA_LICENCE_BDG
ACTIVE BEFORE INSERT POSITION 1
as
begin
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBU_LICENCE_BDG FOR TA_LICENCE_BDG
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBID_LICENCE_SARA FOR TA_LICENCE_SARA
ACTIVE BEFORE INSERT POSITION 1
as
begin
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBU_LICENCE_SARA FOR TA_LICENCE_SARA
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^
